Configuration:
  status: warn
  monitorInterval: 30

  Properties: # 定义全局变量
    Property: # 缺省配置（用于开发环境）。其他环境需要在VM参数中指定，如下：
      #测试：-Dlog.level.console=warn -Dlog.level.demo=trace
      #生产：-Dlog.level.console=warn -Dlog.level.demo=info
      - name: log.level.console
        value: trace
      - name: log.level.demo
        value: trace
      - name: log.path
        value: logs
      - name: project.name
        value: demo
      - name: log.pattern
        value: "%d{yyyy-MM-dd HH:mm:ss.SSS} -%5p ${PID:-} [%t] %C{10} %L : %m%n"
      - name: log.maxSize
        value: "10 MB"

  Appenders:
    Console:  #输出到控制台
      name: CONSOLE
      target: SYSTEM_OUT
      ThresholdFilter:
        level: ${sys:log.level.console} # “sys:”表示：如果VM参数中没指定这个变量值，则使用本文件中定义的缺省全局变量值
        onMatch: ACCEPT
        onMismatch: DENY
      PatternLayout:
        pattern: ${log.pattern}
    RollingFile:
      # 启动日志
      - name: ROLLING_FILE
        ignoreExceptions: false
        fileName: ${log.path}/info/${project.name}.log
        filePattern: "${log.path}/info/$${date:yyyy-MM}/${project.name}-%d{yyyy-MM-dd}-%i.log.gz"
        PatternLayout:
          pattern: ${log.pattern}
        Filters:
          # 一定要先去除不接受的日志级别，然后获取需要接受的日志级别
          ThresholdFilter:
            - level: error
              onMatch: DENY
              onMismatch: NEUTRAL
            - level: info
              onMatch: ACCEPT
              onMismatch: DENY
        Policies:
          # 超过指定大小后归档
          SizeBasedTriggeringPolicy:
            size: ${log.maxSize}
          TimeBasedTriggeringPolicy:  # 按天分类
            modulate: true
            interval: 1
        DefaultRolloverStrategy:
          # 文件最多100个
          max: 100
      # 错误日志
      - name: EXCEPTION_ROLLING_FILE
        ignoreExceptions: false
        fileName: ${log.path}/error/${project.name}.log
        filePattern: "${log.path}/error/$${date:yyyy-MM}/${project.name}-%d{yyyy-MM-dd}-%i.log.gz"
        ThresholdFilter:
          level: error
          onMatch: ACCEPT
          onMismatch: DENY
        PatternLayout:
          pattern: ${log.pattern}
        Policies:
          # 超过指定大小后归档
          SizeBasedTriggeringPolicy:
            size: ${log.maxSize}
          TimeBasedTriggeringPolicy:  # 按天分类
            modulate: true
            interval: 1
        DefaultRolloverStrategy:
          # 文件最多100个
          max: 100
      # Druid日志
      - name: DRUIDSQL_ROLLING_FILE
        fileName: ${log.path}/druid/druid.log
        filePattern: "${log.path}/druid/$${date:yyyy-MM}/api-%d{yyyy-MM-dd}-%i.log.gz"
        PatternLayout:
          Pattern: ${log.pattern}
        Policies:
          # 超过指定大小后归档
          SizeBasedTriggeringPolicy:
            size: ${log.maxSize}
        DefaultRolloverStrategy:
          # 文件最多100个
          max: 100

  Loggers:
    # 容器日志，异步打印
    AsyncRoot:
      level: info
      # 设为true可以解决没有类名和行数之类的 日志详细信息的问题，但会损失异步性能方面的优势
      includeLocation: true
      AppenderRef:
        - ref: CONSOLE
        - ref: ROLLING_FILE
        - ref: EXCEPTION_ROLLING_FILE
    # 项目日志，异步打印
    AsyncLogger:
      - name: error
        level: error
        # 是否重复输出到容器日志（root）中
        additivity: false
        # 设为true可以解决没有类名和行数之类的 日志详细信息的问题，但会损失异步性能方面的优势
        includeLocation: true
        AppenderRef:
          - ref: EXCEPTION_ROLLING_FILE
      - name: druid.sql.Statement
        level: debug
        # 是否重复输出到容器日志（root）中
        additivity: false
        AppenderRef:
          - ref: CONSOLE
          - ref: DRUIDSQL_ROLLING_FILE
#      # 为wtf.demo包配置特殊的Log级别，方便调试
#      - name: wtf.demo
#        # 是否重复输出到容器日志（root）中
#        additivity: false
#        level: ${sys:log.level.demo}
#        AppenderRef:
#          - ref: CONSOLE
#          - ref: ROLLING_FILE